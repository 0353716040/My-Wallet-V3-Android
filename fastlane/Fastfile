opt_out_usage

default_platform :android
platform :android do

    desc "Builds using the given environment and build type"
    lane :build do | options |

      environment = options[:environment]

      build_type = options[:build_type]

      gradle(
        task: 'assemble',
        build_type: build_type,
        flavor: 'Env' + environment,
        print_command: false
      )

    end


    desc "Runs all tests"
    lane :test do
      gradle(
        task: "coveralls"
        )
    end


    desc "Submit a release Alpha build to the Play Store. This won't publish, just upload."
    lane :alpha do

      upload_to_play_store(
          track: 'alpha',
          validate_only: 'true',
      )

    end


    desc "Get the configuration files from the Android credentials repository."
    lane :credentials do

      credentials_folder = File.expand_path("../../wallet-android-credentials/")
      if !File.exist? credentials_folder

        sh("echo \"--------------Cloning Credentials Repo--------------\"")
        sh("git clone git@github.com:blockchain/wallet-android-credentials.git ../../")

      end

      sh("echo \"--------------Pulling Latest Credentials--------------\"")
      sh("( cd ../../wallet-android-credentials/ ; git pull )")

      sh("echo \"--------------Unzip Firebase Credentials--------------\"")
      sh("unzip ../../wallet-android-credentials/env.zip  -d ../../wallet-android-credentials/")

      sh("rm -rf ../app/src/env")

      sh("echo \"--------------Copying Firebase Credentials--------------\"")
      sh("cp -r ../../wallet-android-credentials/env ../app/src")

      sh("echo \"--------------Copying Secrets Properties--------------\"")
      sh("cp ../../wallet-android-credentials/secrets.properties ../app")

    end
    

    desc "Get the configuration files from the Android credentials repository on CI."
    lane :ci_credentials do

      sh("echo \"--------------Cloning Credentials Repo--------------\"")
      sh("git clone $CREDENTIALS_REPO ../../tmp/credentials")

      sh("echo \"--------------Unzip Firebase Credentials--------------\"")
      sh("unzip ../../tmp/credentials/env.zip  -d ../../tmp/credentials/")

      sh("echo \"--------------Copying Firebase Credentials--------------\"")
      sh("cp -r ../../tmp/credentials/env ../app/src")

      sh("echo \"--------------Copying Secrets Properties--------------\"")
      sh("cp ../../tmp/credentials/secrets.properties ../app")
    end


    desc "Upload to AppCenter."
    lane :upload_to_appcenter do
      #  Expected env vars: 
      #  APPCENTER_API_TOKEN, APPCENTER_DISTRIBUTE_FILE, APPCENTER_OWNER_NAME,
      #  APPCENTER_DISTRIBUTE_DESTINATIONS, APPCENTER_DISTRIBUTE_RELEASE_NOTES and APPCENTER_APP_NAME
      appcenter_upload
    end


    desc "Tests to run on CI"
    lane :ci_test do
      gradle(
        task: "coveralls",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
        )
    end


    desc "Build to run on CI"
    lane :ci_build do | options |

      environment = options[:environment]

      build_type = options[:build_type]

      ci_credentials

      gradle(
        task: 'assemble',
        build_type: build_type,
        flavor: 'Env' + environment,
        print_command: false,
        flags: "--info --stacktrace --no-daemon"
      )
    end


    desc "Checks to run on CI"
    lane :ci_lint do

      gradle(
        task: 'lint',
        build_type: 'Debug',
        flavor: 'EnvProd',
        print_command: false,
        flags: "lintDebug ktlint -Dpre-dex=false -Pkotlin.incremental=false --no-daemon --stacktrace"
      )
    end


    private_lane :ship_it do
      rand = Random.rand(0..1)
      if rand == 0
        squirrel
      elsif rand == 1
        boat
      end
    end
    

    def squirrel
      puts "
        !!!!
      !!!!!!!!
    !!!!!!!!!!!   O_O
    !!!  !!!!!!! /@ @\\
          !!!!!! \\ x /
          !!!!!!/ m  !m
           !!!!/ __  |
           !!!!|/  \\__
            !!!\\______\\
      "
    end


    def boat
      puts "
         .  o ..
         o . o o.o
              ...oo
                __[]__
             __|_o_o_o\__
             \\\"\"\"\"\"\"\"\"\"\"/
              \\. ..  . /
         ^^^^^^^^^^^^^^^^^^^^
      "
    end


    after_all do |lane|
      # This block is called, only if the executed lane was successful
      ship_it
    end


    error do |lane, exception|
      # This block is called, only if the executed lane failed with an exception
    end
    
end
