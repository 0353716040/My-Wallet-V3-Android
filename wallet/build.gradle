apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply from: 'integTest.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath Libraries.kotlinGradlePlugin
    }
}

group = 'info.blockchain'
version = PROJECT_VERSION

sourceCompatibility = 1.7
targetCompatibility = 1.7

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven {
        url "https://dl.bintray.com/ethereum/maven/"
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

dependencies {
    // Expose Kotlin to all parent modules
    api Libraries.kotlin
    api files('libs/bitcoinj-core-0.15-SNAPSHOT.jar')
    api files('libs/api-client-0.1.16-SNAPSHOT.jar')
    api Libraries.web3j
    implementation Libraries.spongyCastle
    implementation Libraries.json
    // Networking
    implementation Libraries.jacksonCore
    api(Libraries.retrofit) { exclude module: 'okhttp' }
    api Libraries.retrofitJacksonConverter
    api Libraries.retrofitRxJavaAdapter
    api Libraries.okHttpInterceptor
    // Utils
    implementation Libraries.jjwt
    implementation Libraries.okIo
    implementation Libraries.commonsIo
    implementation Libraries.commonsCli
    api Libraries.commonsCodec
    api Libraries.commonsLang
    api Libraries.urlBuilder
    // Logging
    implementation Libraries.slf4j
    // BitcoinJ dependencies
    implementation Libraries.protobuf
    implementation Libraries.findbugs
    api Libraries.guava

    // Testing
    testImplementation Libraries.junit
    testImplementation Libraries.mockito
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
}

jacocoTestReport {
    dependsOn("test")
    reports {
        // coveralls plugin depends on xml format report
        xml.enabled = true
        html.enabled = true
        html.destination "${buildDir}/reports/jacoco/coverage"
    }
}

task generateTestCoverage(type: JacocoReport, dependsOn: "jacocoTestReport") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports on the Debug build."

    def excludedDirs = [
            '**/R.class',
            '**/R$*.class',
            '**/*$Lambda$*.*',
            '**/*Module.*',
            '**/*Dagger*.*',
            '**/*MembersInjector*.*',
            '**/*_Provide*Factory*.*',
            '**/injection**',
            '**/directory**',
            '**/extensions**',
            '**/*_Factory.*',
            '**/*$*$*.*' // Anonymous classes generated by kotlin
    ]
    def javaDebugTree = fileTree(
            dir: "${project.buildDir}/classes/java",
            excludes: excludedDirs)
    def kotlinDebugTree = fileTree(
            dir: "${project.buildDir}/classes/kotlin",
            excludes: excludedDirs)

    def coverageSourceDirs = [
            "src/main/java"
    ]

    classDirectories = files([javaDebugTree], [kotlinDebugTree])
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)

    executionData = files("${project.buildDir}/jacoco/coverage.exec")
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/coverage.xml"
}

tasks.coveralls {
    dependsOn 'test'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/coveralls.xml"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.6"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.6"
    }
}