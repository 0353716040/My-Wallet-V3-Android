apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.novoda.build-properties'
apply from: '../quality/jacoco.gradle'
apply from: '../quality/releasechecks.gradle'

buildProperties {
    secrets.file rootProject.file('app/secrets.properties')
}

android {
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools
    dexOptions.javaMaxHeapSize "3g"

    defaultConfig {
        applicationId "piuk.blockchain.android"
        targetSdkVersion Versions.targetSdk
        versionCode 299
        versionName "6.10.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = "blockchain-$versionName"
        // Flag to hide or show the Contacts feature
        buildConfigBoolean "CONTACTS_ENABLED", false
        buildConfigProperty "SHAPE_SHIFT_API_KEY", buildProperties.secrets['shapeShiftApiKey']
        manifestPlaceholders = [FABRIC_API_KEY: buildProperties.secrets['fabricApiKey'].string]
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            multiDexEnabled false
            buildConfigBoolean "DOGFOOD", false
            buildConfigBoolean "USE_CRASHLYTICS", true
        }
        debug {
            multiDexEnabled true
            buildConfigBoolean "DOGFOOD", false
            buildConfigBoolean "USE_CRASHLYTICS", false
        }
        dogfood {
            initWith release
            debuggable true
            buildConfigBoolean "DOGFOOD", true
            applicationIdSuffix ".dogfood"
            versionNameSuffix '-DOGFOOD'
        }
    }

    flavorDimensions "environment", "minSdk"

    productFlavors {
        /**
         * API LEVELS
         */
        minApi16 {
            dimension "minSdk"
            minSdkVersion Versions.minSdk
        }
        minApi21 {
            // Specifically to avoid Multidexing on CI, which is causing OOM errors for now
            // This should be removed when possible
            dimension "minSdk"
            minSdkVersion 21
        }
        /**
         * Environments
         */
        envProd {
            dimension "environment"
            buildConfigProperty "EXPLORER_URL", buildProperties.secrets['prodExplorer']
            buildConfigProperty "API_URL", buildProperties.secrets['prodApiServer']
            buildConfigProperty "BITCOIN_WEBSOCKET_URL", buildProperties.secrets['prodBtcWebsocket']
            buildConfigProperty "ETHEREUM_WEBSOCKET_URL", buildProperties.secrets['prodEthWebsocket']
            buildConfigProperty "BITCOIN_CASH_WEBSOCKET_URL", buildProperties.secrets['prodBchWebsocket']
            buildConfigField "String", "ENVIRONMENT", '"env_prod"'
        }
        envDev {
            dimension "environment"
            buildConfigProperty "EXPLORER_URL", buildProperties.secrets['devExplorer']
            buildConfigProperty "API_URL", buildProperties.secrets['devApiServer']
            buildConfigProperty "BITCOIN_WEBSOCKET_URL", buildProperties.secrets['devBtcWebsocket']
            buildConfigProperty "ETHEREUM_WEBSOCKET_URL", buildProperties.secrets['devEthWebsocket']
            buildConfigProperty "BITCOIN_CASH_WEBSOCKET_URL", buildProperties.secrets['devBchWebsocket']
            buildConfigField "String", "ENVIRONMENT", '"env_dev"'
            versionNameSuffix '-dev'
        }
        envStaging {
            dimension "environment"
            buildConfigProperty "EXPLORER_URL", buildProperties.secrets['stagingExplorer']
            buildConfigProperty "API_URL", buildProperties.secrets['stagingApiServer']
            buildConfigProperty "BITCOIN_WEBSOCKET_URL", buildProperties.secrets['stagingBtcWebsocket']
            buildConfigProperty "ETHEREUM_WEBSOCKET_URL", buildProperties.secrets['stagingEthWebsocket']
            buildConfigProperty "BITCOIN_CASH_WEBSOCKET_URL", buildProperties.secrets['stagingBchWebsocket']
            buildConfigField "String", "ENVIRONMENT", '"env_staging"'
            versionNameSuffix '-staging'
        }
        envTestnet {
            dimension "environment"
            buildConfigProperty "EXPLORER_URL", buildProperties.secrets['testnetExplorer']
            buildConfigProperty "API_URL", buildProperties.secrets['testnetApiServer']
            buildConfigProperty "BITCOIN_WEBSOCKET_URL", buildProperties.secrets['testnetBtcWebsocket']
            buildConfigProperty "ETHEREUM_WEBSOCKET_URL", buildProperties.secrets['testnetEthWebsocket']
            buildConfigProperty "BITCOIN_CASH_WEBSOCKET_URL", buildProperties.secrets['testnetBchWebsocket']
            buildConfigField "String", "ENVIRONMENT", '"env_testnet"'
            versionNameSuffix '-testnet'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'MissingTranslation', 'ObsoleteLintCustomCheck'
        checkReleaseBuilds true
        fatal 'StopShip'
        htmlReport true
        htmlOutput file("build/reports/lint-report.html")
        abortOnError false
        baseline file("lint-baseline.xml")
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
    }
    dataBinding.enabled true

    testOptions {
        // Fix for Robolectric bug when using AAPT2
        unitTests.includeAndroidResources true
        // Always show the result of every unit test, even if it passes.
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
            reports.junitXml.destination = file('../build/test-results/')
            // Required for correct coverage of Robolectric tests
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

allOpen {
    annotation("piuk.blockchain.android.util.annotations.Mockable")
}

androidExtensions {
    experimental = true
}

afterEvaluate {
    // Ensure correct JSON file is being used when signing the app
    assembleEnvProdMinApi16Release.dependsOn checkFirebaseConfig
}

dependencies {
    implementation project(':wallet')
    implementation project(':core')
    // Support Libs
    implementation Libraries.appCompat
    implementation Libraries.recyclerView
    implementation Libraries.cardView
    implementation Libraries.gridLayout
    implementation Libraries.design
    implementation Libraries.v13
    implementation Libraries.v14
    implementation Libraries.dynamicAnims
    implementation Libraries.constraintLayout
    implementation Libraries.multidex
    kapt Libraries.dataBindingKapt
    // Google services
    implementation Libraries.firebaseMessaging
    implementation Libraries.googlePlayServicesBase
    // Utils
    implementation Libraries.yearclass
    // Rx UI Bindings
    implementation Libraries.rxBinding
    implementation Libraries.rxFingerprint
    // Dagger
    kapt Libraries.daggerKapt
    // Views
    implementation(Libraries.zxing) { transitive = true }
    implementation Libraries.countryPicker
    implementation Libraries.bottomNav
    implementation Libraries.circleIndicator
    implementation Libraries.charts
    // Logging
    implementation(Libraries.crashlytics) { transitive = true }
    // UI/Instrumentation Tests
    androidTestImplementation(Libraries.espresso) {
        exclude group: 'javax.inject', module: 'support-annotations'
    }
    // Unit Tests
    testImplementation Libraries.junit
    testImplementation Libraries.mockito
    testImplementation Libraries.hamcrestJunit
    testImplementation Libraries.kotlinJunit
    testImplementation Libraries.kluent
    testImplementation(Libraries.mockitoKotlin) {
        exclude module: 'kotlin-stdlib'
    }
    testImplementation(Libraries.robolectric) {
        exclude group: 'com.google.guava'
        exclude group: 'com.google.protobuf'
    }
}

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath Libraries.fabricTools
        classpath Libraries.buildProperties
    }
}

repositories {
    jcenter()
    // Required for CountryPicker
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
}

// This must remain at the bottom of this file until Google work out a better way to do this
apply plugin: 'com.google.gms.google-services'